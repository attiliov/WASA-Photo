openapi: 3.1.0

info:
  version: 1.0.0
  title: WASA Photo REST API
  description: |
    This is the API specification for the WASA Photo REST API.

    It's part of the WASA Photo project for the Web and Software Architecture course at Sapienza University of Rome.

    The project description and details are availabe at [this link](http://gamificationlab.uniroma1.it/notes/Project.pdf)

servers:
  - url: http://localhost:8080
    description: Local development server

tags:
  - name: login
    description: |
      This tag is used for the signin/signup operations.
  - name: user
    description: |
      This tag is used for the user operations.
  - name: post
    description: |
      This tag is used for the post operations. 
  - name: comment 
    description: |
      This tag is used for the comment operations.
  - name: like
    description: |
      This tag is used for the like operations.
  - name: follow
    description: |
      This tag is used for the follow operations. 
  - name: ban
    description: |
      This tag is used for the ban operations.
  - name: photo
    description: |
      This tag is for photo related operations.
  - name: feed

components:

  securitySchemes:
    bearerAuth:
      description: |
        This security scheme is used to authenticate a user.
        The user must be signed in to perform the request.
        The user must pass the bearer token in the Authorization header.
      type: http
      scheme: bearer

  schemas:
      
    username:
      description: Username of a user
      type: string
      minLength: 4
      maxLength: 20
      pattern: '^[a-zA-Z0-9_-]+$'
      readOnly: true
      example: mariorossi99

    resourceId:
      description: The Universally Unique Identifier (follows the standard)
      type: string
      format: uuid
      example: 550e8400-e29b-41d4-a716-446655440000
      readOnly: true
  
    date:
      description: representation of Date and time
      type: string
      format: date-time
      example: 2023-01-01T00:00:00Z
      readOnly: true
    
    caption:
      description: A caption for a post or a comment
      type: string
      minLength: 1
      maxLength: 800
      pattern: '.*'
      example: "This is a caption"
      readOnly: false
    
    image:
      description: An uri to an image
      type: string
      format: uri
      example: "localhost:8080/users/mariorossi99/posts/1/image"
      readOnly: false

    counter:
      description: A simple counter,
                    keeps track of the number of followers, likes, etc.
      type: integer
      example: 8
      readOnly: true

    userCollection:
      description: A list of usersnames, 
                   it is used to keep track of the users that liked a post or a comment
      type: array
      minLength: 0
      maxLength: 69420
      items:
        anyOf:
          - $ref: '#/components/schemas/User/properties/username'
          - $ref: '#/components/schemas/User/properties/userId'
          - $ref: '#/components/schemas/User/properties/profileImage'
      readOnly: false

    User:
      title: User
      type: object
      description: A user of the WASA Photo platform
      properties:
        userId:
          $ref: '#/components/schemas/resourceId'
        username:
          $ref: '#/components/schemas/username'
        signUpDate:
          $ref: '#/components/schemas/date'
        lastSeenDate:
          $ref: '#/components/schemas/date'
        bio:
          $ref: '#/components/schemas/caption'
        profileImage:
          $ref: '#/components/schemas/image'
        followers:
          $ref: '#/components/schemas/counter'
        following:
          $ref: '#/components/schemas/counter'
      required:
        - username
        - signUpDate

    UserPost:
      title: UserPost
      type: object
      description: A post created by a user
      properties:
        postId:
          $ref: '#/components/schemas/resourceId'
        authorUsername:
          $ref: '#/components/schemas/username'
        authorId:
          $ref: '#/components/schemas/User/properties/userId'
        creationDate:
          $ref: '#/components/schemas/date'
        caption:
          $ref: '#/components/schemas/caption'
        image:
          $ref: '#/components/schemas/image'
        likeCount:
          $ref: '#/components/schemas/counter'
        commentCount:
          $ref: '#/components/schemas/counter'
      required:
        - postId
        - authorUsername
        - creationDate
        - caption

    Comment:
      title: Comment
      type: object
      description: A comment made by a user to a post
      properties:
        commentid:
          $ref: '#/components/schemas/resourceId'
        authorUsername:
          $ref: '#/components/schemas/username'
        authorId:
          $ref: '#/components/schemas/User/properties/userId'
        creationDate:
          $ref: '#/components/schemas/date'
        caption:
          $ref: '#/components/schemas/caption'
        likeCount:
          $ref: '#/components/schemas/counter'
      required:
        - commentId
        - authorId
        - authorUsername
        - creationDate
        - caption
    

    postStream:
      description: An array of posts, 
                   can either be the list of posts of a user or the list of posts of the users followed by a user 
      type: array
      minLength: 0
      maxLength: 69420
      items:
        $ref: '#/components/schemas/UserPost/properties/postId'
    
    commentStream:
      description: An array of comments of a post
      type: array
      minLength: 0
      maxLength: 69420
      items:
        $ref: '#/components/schemas/Comment'

    Error:
      description: An error message
      type: object
      properties:
        message:
          type: string
          minLength: 1
          maxLength: 100
          pattern: '^[a-zA-Z0-9_-]$'
      required:
        - message
    
    Success:
      description: A successful request
      type: object
      properties:
        message:
          type: string
          minLength: 1
          maxLength: 100
          pattern: '^[a-zA-Z0-9_-]$'
        body:
          type: object
      required:
        - message
  
  parameters:
    userId:
      name: userId
      in: path
      description: The userId that is being requested
      required: true
      schema:
        $ref: '#/components/schemas/resourceId'
    postId:
      name: postId
      in: path
      description: The postId that is being requested
      required: true
      schema:
        $ref: '#/components/schemas/resourceId'
    commentId:
      name: commentId
      in: path
      description: The commentId that is being requested
      required: true
      schema:
        $ref: '#/components/schemas/resourceId'
    followingId:
      name: followingId
      in: path
      description: The userId that is being requested
      required: true
      schema:
        $ref: '#/components/schemas/resourceId'
    bannedId:
      name: bannedId
      in: path
      description: The userId that is being requested
      required: true
      schema:
        $ref: '#/components/schemas/resourceId'
    photoId:
      name: photoId
      in: path
      description: The photoId that is being requested
      required: true
      schema:
        $ref: '#/components/schemas/resourceId'
    likeId:
      name: likeId
      in: path
      description: The likeId that is being requested
      required: true
      schema:
        $ref: '#/components/schemas/resourceId'

  responses:

    #Error responses
    NotFound: #for 404
      description: The requested resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized: #for 401
      description: The request requires user authentication, 
                    or the user is not authorized to perform the requested action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest: #for 400
      description: The request was not valid, 
                    the request body is missing or malformed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError: #for 500
      description: An error occurred on the server side
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict: #for 409
      description: The request could not be completed due to a conflict with the current state of the target resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    
    
    #Success responses
    Created: #for 201
      description: The resource was successfully created
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/resourceId'
    Ok: #for 200
      description: The request has succeeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Success'
    image: # an image file, can be any type of image
      description: An image file
      content:
        image/*:
          schema:
            type: string
            format: binary
    UserPost: # 200 response for a post 
      description: A post created by a user
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserPost'
    Comment: # 200 response for a comment
      description: A comment made by a user to a post
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Comment'
    resourceId:
      description: A resource id
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/resourceId'

  requestBodies:
    UserPost:
      description: A post created by a user
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/UserPost'
    Comment:
      description: A comment made by a user to a post
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Comment'
    username:
      description: The username of a user
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/username'

paths:
 
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/username' 
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/resourceId'
  
  /users:
    description: This endpoints handles collection of users.
    
    get:
      tags: ["user"]
      operationId: searchUser
      summary: Search for a user, based on the username
      description: |
        This endpoint is used to search for a user, based on the username.
        The username is passed as a query parameter.
        The response will retun a list of usernames similar to the one passed as a query parameter.
      parameters:
        - name: username
          in: query
          description: The username to search for
          required: true
          schema:
            $ref: '#/components/schemas/username'
      responses:
        "200":
          description: The list of usernames similar to the one passed as a query parameter
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/userCollection'
        "400": #the request body is missing or malformed
          $ref: '#/components/responses/BadRequest'
  
  /users/{userId}:
    description: This endpoints handles a single user.
                  it can be used to get the details of a user, delete it, or update it.
    parameters:
      - $ref: '#/components/parameters/userId'

    get: #get user profile
      tags: ["user"]
      operationId: getUserProfile
      summary: Get the profile of a user, it will return user details and the list of posts of the user
      description: |
        This endpoint is used to get the profile of a user.
        The userId is passed as a path parameter.
        The response will retun:
          - the details of the user
          - the list of posts of the user.
      responses:
        "200":
          description: User is found and profile is returned in the response body
          content:
            application/json:
              schema:
                type: object
                properties:
                  userInfo:
                    $ref: '#/components/schemas/User'
                  userStream:
                    $ref: '#/components/schemas/postStream'
        "404": # user not found
          {$ref: '#/components/responses/NotFound'}
        "500":
          {$ref: '#/components/responses/InternalServerError'}

    put: #update user information
      tags: ["user"]
      operationId: setMyUserName #actually updateUserProfile since it will update any profile info
      summary: Update the profile of a user
      description: Updates the given profile
      requestBody:
        description: A user object
        content: 
          application/json:
            schema: 
              $ref: '#/components/schemas/User'
      responses:
        "202":
          description: User fields updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400": #the request body is missing or malformed
          $ref: '#/components/responses/BadRequest'
        "404": #user not found
          $ref: '#/components/responses/NotFound'
        "500":  
          $ref: '#/components/responses/InternalServerError'
        "409":
          $ref: '#/components/responses/Conflict'
           
    delete: #delete
      tags: ["user"]
      operationId: deleteUser
      summary: Delete a user
      description: Deletes the given user
      responses:
        "200": #user deleted
          $ref: '#/components/responses/Ok'
        "404": #user not found
          $ref: '#/components/responses/NotFound'
        "500": #server error
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/posts:
    description: This endpoint handles the collection of posts of a user.
    parameters:
      - $ref: '#/components/parameters/userId'
  
    post: 
      tags: ["post"]
      operationId: createPost
      summary: Create a new post
      description: |
        This endpoint is used to create a new post.
        The userId is passed as a path parameter.
        The post details are passed in the request body.
        The response will retun the id of the new post.
      requestBody:
        $ref: '#/components/requestBodies/UserPost'
      responses:
        "201":
          $ref: '#/components/responses/Created'
        "400": #the request body is missing or malformed
          $ref: '#/components/responses/BadRequest'
        "404": #user not found
          $ref: '#/components/responses/NotFound'
        "500": #server error
          $ref: '#/components/responses/InternalServerError'
    
    get: #get user posts
      tags: ["post"]
      operationId: getUserPosts
      summary: Get all the posts of a user
      description: |
        This endpoint is used to get all the posts of a user.
        The userId is passed as a path parameter.
        The response will retun the list of posts of the user.
      responses:
        "200":
          description: The list of posts of the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postStream'
        "404": #user not found
          $ref: '#/components/responses/NotFound'

  /users/{userId}/posts/{postId}:
    description: This endpoint handles a single post of a user.
                  it can be used to get the details of a post, delete it, or update it.
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/postId'
    
    get:
      tags: ["post"]
      operationId: getPost
      summary: Get the details of a post
      description: |
        This request is used to get the details of a post.
        The userId and the postId are passed as path parameters.
        The response will retun the details of the post in the body.
      responses:
        "200":
          $ref: '#/components/responses/UserPost'
        "404": #post not found
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
      
    put:
      tags: ["post"]
      operationId: editPost
      summary: Edit a post
      description: |
        This request is used to edit a post.
        The userId and the postId are passed as path parameters.
        The new post details are passed in the request body.
        The response will retun the id of the new post.
      requestBody:
        $ref: '#/components/requestBodies/UserPost'
      responses:
        "202": #update successful
          $ref: '#/components/responses/Ok'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "401":
          $ref: '#/components/responses/Unauthorized'

    delete:
      tags: ["post"]
      operationId: deletePost
      summary: Delete the post
      description: Deletes the given post
      responses:
        "200": #update successful
          $ref: '#/components/responses/Ok'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/posts/{postId}/likes:
    description: This endpoint handles the collection of likes of a post.
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/postId'

    get:
      tags: ["like"]
      operationId: getPostLikes
      summary: Get all the likes of a post
      description: |
        This request is used to get all the users that liked a post.
        The postId is passed as a path parameter.
        The response will retun the list of likes of the post.
      responses:
        "200":
          description: The list of likes of the post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userCollection'
        "404": #post not found
          $ref: '#/components/responses/NotFound'
        "500": #server error
          $ref: '#/components/responses/InternalServerError'
        "401":
          $ref: '#/components/responses/Unauthorized'
    
  /users/{userId}/posts/{postId}/likes/{likeId}:
    description: A like to a post
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/postId'
      - $ref: '#/components/parameters/likeId'

    put:
      tags: ["like"]
      operationId: likePhoto
      summary: Like a post
      description: |
        This request is like a post.
        The postId is taken from the path
        The userId of the user who is liking is taken from the bearer token
        The response doesnt have a body
      responses:
        "202":
          $ref: '#/components/responses/Ok'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "401":
          $ref: '#/components/responses/Unauthorized'
    
    delete:
      tags: ["like"]
      operationId: unlikePhoto
      summary: Unlike a post
      description: |
        This request is used to remove a like from a post.
        The postId is taken from the path
        The userId of the like to remove is taken from the bearer token
        The response will return the new list of likes of the post
      responses:
        '200':
          description: The new list of likes of the post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userCollection'
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/posts/{postId}/comments:
    description: This endpoint handles the collection of comments of a post.
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/postId'
  
    post:
      tags: ["comment"]
      operationId: commentPhoto
      summary: Create a new comment
      description: |
        This request is used to create a new comment.
        The postownerId and the postId are passed as path parameters.
        The comment author is in the body.
        The comment details are passed in the request body.
        The response will retun the id of the new comment.
      requestBody:
        $ref: '#/components/requestBodies/Comment'
      responses:
        "201":
          $ref: '#/components/responses/Created'
        "400": #the request body is missing or malformed
          $ref: '#/components/responses/BadRequest'
        "404": #user not found
          $ref: '#/components/responses/NotFound'
        "500": #server error
          $ref: '#/components/responses/InternalServerError'
    
    get:
      tags: ["comment"]
      operationId: getPostComments
      summary: Get all the comments of a post
      description: |
        This endpoint is used to get all the comments of a post.
        The userId and the postId are passed
        The response will retun the list of comments of the post.
      responses:
        "200":
          description: The list of comments of the post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commentStream'
        "404": #post not found
          $ref: '#/components/responses/NotFound'
        "500": #server error
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/posts/{postId}/comments/{commentId}:
    description: This hendpoints handles comment edits and deletion
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/postId'
      - $ref: '#/components/parameters/commentId'
    
    get:
      tags: ["comment"]
      operationId: getComment
      summary: Get the details of a comment
      description: |
        This request is used to get the details of a comment.
        The postownerId, the postId and the commentId are passed as path parameters.
        The response will retun the details of the comment in the body.
      responses:
        "200":
          $ref: '#/components/responses/Comment'
        "404": #post not found
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'

    put: 
      tags: ["comment"]
      operationId: editComment
      summary: Edit a comment
      description: |
        This request is used to edit a comment.
        The postownerId, the postId and the commentId are passed as path parameters.
        A user can edit only is own comments. (owner is compared with the userId in the bearer token)
        The new comment details are passed in the request body.
        The response will retun the id of the new comment.
      requestBody:
        $ref: '#/components/requestBodies/Comment'
      responses:
        "202": #update successful
          $ref: '#/components/responses/Ok'
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'
  
    delete: 
      tags: ["comment"]
      operationId: uncommentPhoto
      summary: Delete a comment
      description:
        This request is used to delete a comment.
        The postownerId, the postId and the commentId are passed as path parameters.
        A user can delete only is own comments. (owner is compared with the userId in the bearer token)
        The response will retun the new collection of comments of the post.
      responses:
        "200":
          description: The new collection of comments of the post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commentStream'
        "404":
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "500":
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/posts/{postId}/comments/{commentId}/likes:
    description: This endpoint handles the collection of likes of a comment.
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/postId'
      - $ref: '#/components/parameters/commentId'

    get:
      tags: ["like"]
      operationId: getCommentLikes
      summary: Get all the likes of a comment
      description: |
        This request is used to get all the likes of a comment.
        The postId is passed as a path parameter.
        The response will retun the list of likes of the post.
      responses:
        "200":
          description: The list of likes of the comment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userCollection'
        "404": #post not found
          $ref: '#/components/responses/NotFound'
        "500": #server error
          $ref: '#/components/responses/InternalServerError'
  
  /users/{userId}/posts/{postId}/comments/{commentId}/likes/{likeId}:
    description: A like to a comment
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/postId'
      - $ref: '#/components/parameters/commentId'
      - $ref: '#/components/parameters/likeId'

    put:
      tags: ["like"]
      operationId: likeComment
      summary: Like a comment
      description: |
        This request is used to like a comment.
        The postId is taken from the path
        The userId of the user who is liking is taken from the bearer token
      responses:
        "202":
          $ref: '#/components/responses/Ok'
        "404":
          $ref: '#/components/responses/NotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'
        "401":
          $ref: '#/components/responses/Unauthorized'
    
    delete:
      tags: ["like"]
      operationId: unlikeComment
      summary: Unlike a comment
      description: |
        This request is used to remove a like from a comment.
        The postId is taken from the path
        The userId of the like to remove is taken from the bearer token
        The response will return the new list of likes of the comment
      responses:
        '200':
          description: The new list of users that liked the post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userCollection'
        '400':
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/followers:
    description: This endpoint handles the collection of followers of a user.
    parameters:
      - $ref: '#/components/parameters/userId'

    get: 
      tags: ["follow"]
      operationId: getFollowers
      summary: Get all the followers of a user
      description: |
        This request is used to get all the followers of a user.
        The userId is passed as a path parameter.
        The response will retun the list of followers of the user.
      responses:
        "200":
          description: The list of followers of the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userCollection'
        "404": #user not found
          $ref: '#/components/responses/NotFound'
        "500": #server error
          $ref: '#/components/responses/InternalServerError'
        "401": #unauthorized
          $ref: '#/components/responses/Unauthorized'

  /users/{userId}/following:
    description: This endpoint handles the collection of users followed by a user.
    parameters:
      - $ref: '#/components/parameters/userId'

    get:
      tags: ["follow"]
      operationId: getFollowing
      summary: Get all the users followed by a user
      description: |
        This request is used to get all the users followed by a user.
        The userId is passed as a path parameter.
        The response will retun the list of users followed by the user.
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        "200":
          description: The list of users followed by the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userCollection'
        "404": #user not found
          $ref: '#/components/responses/NotFound'
        "500": #server error
          $ref: '#/components/responses/InternalServerError'
        "401": #unauthorized
          $ref: '#/components/responses/Unauthorized'
  
  /users/{userId}/following/{followingId}:
    description: A user followed by a user
    parameters:
      - $ref: '#/components/parameters/userId'
      - $ref: '#/components/parameters/followingId'

    put:
      tags: ["follow"]
      operationId: followUser
      summary: Follow a user
      description: |
        This request is used to follow a user.
        The userId of the user to follow is passed as a path parameter.
        The userId of the user who is following is taken from the bearer token.
        The response will retun the new list of followers of the user.
      responses:
        "201":
          description: The new list of followers of the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userCollection'
        "404": #user not found
          $ref: '#/components/responses/NotFound'
        "500": #server error
          $ref: '#/components/responses/InternalServerError'
        "401": #unauthorized
          $ref: '#/components/responses/Unauthorized'

    delete:
      tags: ["follow"]
      operationId: unfollowUser
      summary: Unfollow a user
      description: |
        This request is used to unfollow a user.
        The userId of the user to unfollow is passed as a path parameter.
        The userId of the user who is unfollowing is taken from the bearer token.
        The response will retun the new list of followers of the user.
      responses:
        "200":
          description: The new list of followers of the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userCollection'
        "404": #user not found
          $ref: '#/components/responses/NotFound'
        "500": #server error
          $ref: '#/components/responses/InternalServerError'
        "401": #unauthorized
          $ref: '#/components/responses/Unauthorized'
    
  /users/{userId}/banned:
    description: This endpoint handles the collection of banned users of a user.
    parameters:
      - $ref: '#/components/parameters/userId'

    get: 
      tags: ["ban"]
      operationId: getBannedUsers
      summary: Get all the users banned by a user
      description: |
        This request is used to get all the users banned by a user.
        The userId is passed as a path parameter.
        The response will retun the list of users banned by the user.
      responses:
        "200":
          description: The list of users banned by the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userCollection'
        "401": #unauthorized
          $ref: '#/components/responses/Unauthorized'
        "500": #server error
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/banned/{bannedId}:
    description: A user banned by a user
    parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/bannedId'

    put:
      tags: ["ban"]
      operationId: banUser
      summary: Ban a user
      description: |
        This request is used to ban a user.
        The userId of the user to ban is passed as a path parameter.
        The userId of the user who is banning is taken from the bearer token.
        The response will retun the new list of banned users of the user.
      responses:
        "201":
          description: The new list of banned users of the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userCollection'
        "401": #unauthorized
          $ref: '#/components/responses/Unauthorized'
        "404": #user not found
          $ref: '#/components/responses/NotFound'
        "500": #server error
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags: ["ban"]
      operationId: unbanUser
      summary: Unban a user
      description: |
        This request is used to unban a user.
        The userId of the user to unban is passed as a path parameter.
        The userId of the user who is unbanning is taken from the bearer token (its also in the path since one can only change is own ban list).
        The response will retun the new list of banned users of the user.
      responses:
        "200":
          description: The new list of banned users of the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userCollection'
        "401": #unauthorized
          $ref: '#/components/responses/Unauthorized'
        "500": #server error
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/photos:
    description: This endpoint handles the collection of photos of a user.
    parameters:
        - $ref: '#/components/parameters/userId'

    post:
      tags: ["photo"]
      operationId: uploadPhoto
      summary: Upload a photo
      description: |
        This request is used to upload a photo.
        The userId of the user who is uploading is taken from the bearer token.
        The photo is passed in the request body.
        A user can upload only in his own photo collection. (owner is compared with the userId in the bearer token)
        The response will retun the uri of the photo.
      requestBody:
        description: The photo itself
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The image file to upload
      responses:
        "201":
          $ref: '#/components/responses/resourceId'
        "400": #the request body is missing or malformed
          $ref: '#/components/responses/BadRequest'
        "404": #user not found
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "500": #server error
          $ref: '#/components/responses/InternalServerError'
        
  /users/{userId}/photos/{photoId}:
    description: A photo of a user
    parameters:
        - $ref: '#/components/parameters/userId'
        - $ref: '#/components/parameters/photoId'

    get:
      tags: ["photo"]
      operationId: getPhoto
      summary: Get a photo
      description: |
        This request is used to get a photo.
        The userId of the user who is requesting is taken from the bearer token.
        The photo owner and photoId is passed as a path parameter.
        The response will return the image file.
      responses:
        "200":
          $ref: '#/components/responses/image'
        "404": #photo not found
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "500": #server error
          $ref: '#/components/responses/InternalServerError'
    
    delete:
      tags: ["photo"]
      operationId: deletePhoto
      summary: Delete a photo
      description: |
        This request is used to delete a photo.
        The userId of the user who is requesting is taken from the bearer token. (only the uploader can request a deletion)
        The photo owner and photoId is passed as a path parameter.
        The response will return the image file.
      responses:
        "200":
          $ref: '#/components/responses/Ok'
        "404": #photo not found
          $ref: '#/components/responses/NotFound'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "500": #server error
          $ref: '#/components/responses/InternalServerError'

  /users/{userId}/feed:
    description: This endpoint is used to get the feed of an user
                  i.e. ther  stream of posts of the following users
    parameters:
        - $ref: '#/components/parameters/userId'

    get:
      tags: ["feed"]
      operationId: getMyStream
      summary: Get the feed of a user
      description: |
        This request is used to get the feed of a user.
        The userId of the user who is requesting is taken from the bearer token.
        The response will return the stream of posts of the following users.
      responses:
        "200":
          description: The feed of the user who is requesting
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postStream'
        "401":
          $ref: '#/components/responses/Unauthorized'
        "500": #server error
          $ref: '#/components/responses/InternalServerError'    

security:
  - bearerAuth: [] 